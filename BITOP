
; r3 = r1 ^ r2
; r4, r5, r6 preserved, input trashed
@bitxor
	psh r4
	psh r5
	psh r6
	mov r4, 1
	clr r5
@bitxor_loop
	mov r5, r1
	mod r5, 2
	mov r6, r2
	mod r6, 2
	ne_ r5, r6
	mul r5, r4
	add r3, r5
	asr r1
	asr r2
	asl r4
	jnz r1, %xor_loop
	jnz r2, %xor_loop
	pop r6
	pop r5
	pop r4
	ret

; r3 = r1 ^ r2
; r4, r5, r6 preserved, input trashed
@bitand
	psh r4
	psh r5
	psh r6
	mov r4, 1
	clr r5
@bitand_loop
	mov r5, r1
	mod r5, 2
	mov r6, r2
	mod r6, 2
	and r5, r6
	mul r5, r4
	add r3, r5
	asr r1
	asr r2
	asl r4
	jnz r1, %xor_loop
	jnz r2, %xor_loop
	pop r6
	pop r5
	pop r4
	ret

; r3 = r1 ^ r2
; r4, r5, r6 preserved, input trashed
@bitor
	psh r4
	psh r5
	psh r6
	mov r4, 1
	clr r5
@bitor_loop
	mov r5, r1
	mod r5, 2
	mov r6, r2
	mod r6, 2
	or_ r5, r6
	mul r5, r4
	add r3, r5
	asr r1
	asr r2
	asl r4
	jnz r1, %xor_loop
	jnz r2, %xor_loop
	pop r6
	pop r5
	pop r4
	ret

; r1 = ~r1
; r2 preserved
@bitneg
	psh r2
	inc r1
	clr r2
	sub r2, r1
	mov r1, r2
	pop r2
	ret


