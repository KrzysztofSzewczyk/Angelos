
// Hello, world!

program {
    stack: 16
    address: 0@0
}

module {
    data {
        string: "Hello, world"
        _: 0
    }

    pub fn _start/0 {
        preserve { $2 } in puts/1 { $1 = this.string }
        
        end
    }

    pub fn puts/1 {
        fuse while {
            $2 = deref $1;
        } ($2) with #-1 {
            out $2
            $1++
        }

        out 10

        ret
    }

    pub fn puts_opt/1 {
        fuse while {
            $2 = deref $1;
        } ($2) with #-1 {
            out $2
            $1++
        }

        out 10

        ret
    }
}

// Interpreter bitness check

program {
    stack: 3
    address: 0@0
}

module {
    pub fn _start/0 {
        preserve { $2 } in bitness/0 with {
            out $@
        }
    }

    pub fn bitness/0 as $1 {
        ($1, $2) = (0, 1)

        unsafe while($2) {
            $1++
            $2<<=
        }
    }
}

// Sierpinski triangle

program {
    stack: 0
    address: 0@0
}

module {
    pub fn _start/0 {
        do {
            $2 = 0

            do {
                $3 = $1 & $2
                $# = $3 >= 1
                $3 = '*'
                conditional { $3 = ' ' }
                out $3
            } while {
                $# = $2 < 63
                conditional { $2++ }
            } ($#)

            out 10
        } while {
            $# = $1 < 63
            conditional { $1++ }
        } ($#)
    }
}

// Count in hexadecimal.

program {
    stack: 0
    address: 0@0
}

module {
    pub fn _start/0 {
        ($1, $2) = '0', '0'

        while {
            $# = $1 <= 'F'
        } ($#) {
            while {
                $# = $2 <= 'F'
            } ($#) {
                out $1, $2, ' '

                $2++
            }

            $2 = '0'
            $1++
        }
    }
}

// Truth machine

program {
    stack: 0
    address: 0@0
}

module {
    pub fn _start/0 {
        $1 = in

        if($1) {
            while($1) { out '1' }
        } else { out '0' }
    }
}
