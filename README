

                                                      .oooo.    .o8        .o88o. 
                                                    .dP""Y88b  "888        888 `" 
                .oooo.    .oooo.o ooo. .oo.  .oo.         ]8P'  888oooo.  o888oo  
               `P  )88b  d88(  "8 `888P"Y88bP"Y88b      .d8P'   d88' `88b  888    
                .oP"888  `"Y88b.   888   888   888    .dP'      888   888  888    
               d8(  888  o.  )88b  888   888   888  .oP     .o  888   888  888    
               `Y888""8o 8""888P' o888o o888o o888o 8888888888  `Y8bod8P' o888o   
                                                                                  
                                                                                  
                                                                                  
The only true brainfuck assembler. Produces small and efficient brainfuck code based on instruction choice.
With Lua preprocessor wired up, named labels and all the features you'd expect from a normal assembly, it's ready
for your use. Precise floating point library is on the board, memory allocation procedures are available for
inlining. Last changes include stack-based offsets, virtual instructions and effective adresses. Why not
check it out?

etc/manual.pdf                   - WIP, UP TO DATE ASM2BF MANUAL AND DOCUMENTATION.
https://discord.gg/m4Wcenn       - THE DISCORD SERVER FOR ASM2BF.

https://esolangs.org/wiki/Asm2bf - in-depth explanation of asm2bf inner workings and programming techniques.
                                   serves as a documentation aswell. article.txt contains a mirror of this article.
                                   it is a bit outdated (check section "State-of-art Documentation"), but it may
                                   prove itself useful.

examples/                        - who doesn't love learning by examples?
test/                            - unit tests for the entire toolchain.

a functional programming language interpreter in 150 lines of asm2bf:
https://github.com/kspalaiologos/asmbf/blob/master/examples/sk.asm

asm2bf was used to create a JSON formatter webservice:
https://github.com/kspalaiologos/JSONFormatter/blob/master/jsonformatter.asm

also, a subleq interpreter approach has been taken:
https://github.com/kspalaiologos/SqEMU/blob/master/dev-sqemu.s

an optimized 8ball:
https://github.com/kspalaiologos/asmbf/blob/master/examples/8ball.asm

----------------------------------------- What can asm2bf do? ------------------------------------------

First and foremost, asm2bf is a language which is very portable. It can compile to special asm2bf
bytecode (which can be retargetted to virtually any platform in a few hours). It also outputs _pure_
brainfuck, which is executable by any brainfuck interpreter, which means, that asm2bf is able to benefit
from countless brainfuck-to-any compilers.

Secondly, asm2bf is a both a fairly low level language and a high level language. It abstracts the
concepts of effective adresses, powerful preprocessors, advanced control flow, floating point numbers,
signed arithmetic, etc..., into a robust toolkit for developing brainfuck, and, subsequently, any language
which can be a target of compilation from brainfuck or asm2bf bytecode.

Third, asm2bf in itself can be made to produce really small programs (check 8ball.asm in examples),
but it can also be used to create very complicated programs (check sk.asm). Because it provides an acceptable
level of abstraction to the programmer, it's feasible to write your proofs of concepts in asm2bf and
later optimize them to be as fast as possible using existing resources and community-created guides,
or by reading the code and experimenting yourself.

asm2bf is still, after multiple years, work in progress. It gains new features rather often. So far,
asm2bf has around 160 instructions that you can use in your programs and around 300 lines of Lua
code providing essential batteries for metaprogramming in asm2bf. It's a hobby project of mine, to which
a few people decided to contribute, but I'll try to maintain it for as long as possible.

asm2bf is capable of being the foundation of any more or less complex program. It has been used to create
an operating system (which boots and operates mainly thanks to pure brainfuck! This is possible because the
brainfuck code can directly access the memory and set up a custom interrupt handler, which executes
provided assembled machine code when the timer intterupt fires, which later modifies the interpreter
to add special instructions to it). asm2bf has also been used to create a small (~150 line) functional
programming language interpreter, which compiles to only around 20 kilobytes of brainfuck. It was also
used to create tiny brainfuck programs, as well as proofs of concepts for web development in brainfuck.

Finally, I, the author, am working on an exhaustive manual on _all_ of asm2bf, for which the progress
you can see in etc/manual.pdf

------------------------------------------ Get a taste of it! ------------------------------------------

#function bf_while(reg) print("nav " .. reg); print("raw .["); end
#function bf_wend(reg) print("nav " .. reg); print("raw .]"); end

; branchless* bitness test.
; r1 <= interpreter's bitness
; r2 <= trashed
@bitness
    clr r1
    mov r2, 1
$(bf_while("r2"))
    inc r1
    asl r2
$(bf_wend("r2"))
    ret

; Note: We say branchless, because there are no explicit jumps.
;       There is a branch (a brainfuck loop), but it's not in a
;       logical sense (no label is made, no jmp is executed).

--------------------------------------- Installation Instruction ---------------------------------------

1. Pull the repository from github: `git clone https://github.com/kspalaiologos/asmbf'
2. Run the configure script and build asm2bf: `./configure && sudo make all install`

-------------------------------------- State-of-art Documentation --------------------------------------

There is the esolang wiki article which you can check out, but it's a bit outdated and incomplete.
Feel free to join the discord server for asm2bf, where you can discuss the project or ask me about
learning asm2bf: https://discord.gg/m4Wcenn.

You can also check out the manual.pdf file; although up to date, it's not complete.

---------------------------------------------- Dependencies ---------------------------------------------

Term::ReadKey, File::Basename, Term::ANSIColor                          @ cpan
gcc, bison, flex, make   optionally: autotools, curses (for bfadabg)    @ literally anywhwere

--------------------------------------------- Windows Build ---------------------------------------------

To _configure_ this project on Windows, you need either Cygwin or MinGW (msys). The build should look
exactly the same like the Linux one.

Note that building the project on Windows and targets other than `release' and `auto' is unsupported.
